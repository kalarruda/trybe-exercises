use ("erp");
db.clients.aggregate([
  { $match: {
    sexo: "MASCULINO"
  }}
]);
// Exercício 1: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "MASCULINO" .

use ("erp");
db.clients.aggregate([
  { $match: {
    sexo: "FEMININO",
    dataNascimento: {
      $gte: ISODate('1995-01-01'),
      $lte: ISODate('2005-01-01'),
    }
  }}
]);
// Exercício 2: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 .

use ("erp");
db.clients.aggregate([
  { $match: {
    sexo: "FEMININO",
    dataNascimento: {
      $gte: ISODate('1995-01-01'),
      $lte: ISODate('2005-01-01')
    }
  }},
  { $limit: 5 }
])
// Exercício 3: Utilizando o estágio $match , escreva uma agregação para retornar somente os clientes do sexo "FEMININO" e com data de nascimento entre os anos de 1995 e 2005 , limitando a quantidade de documentos retornados em 5 .

use ("erp");
db.clients.aggregate([
  { $match: {
    "endereco.uf": "SC",
  } },
  { $group: {
    _id: "$endereco.uf",
    total: { $sum: 1 }
  } }
]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção. Retorne um documento em que o campo _id contenha a UF e outro campo com o total.

use ("erp");
db.clients.aggregate([
  { $group: {
    _id: "$sexo",
    total: { $sum: 1 }  
  } }
])
// Exercício 5: Agrupe os clientes por sexo . Retorne o total de clientes de cada sexo no campo total .

use ("erp");
db.clients.aggregate([
  { $group: {
    _id: {
      sexo: "$sexo",
      uf: "$endereco.uf"
    },
      total: { $sum: 1 } 
  } }
]);
// Exercício 6: Agrupe os clientes por sexo e uf . Retorne o total de clientes de cada sexo no campo total .

use ("erp");
db.clients.aggregate([
  {
    $group: {
      _id: {
        estado: "$endereco.uf",
        sexo: "$sexo"
      },
      total: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      estado: "$_id.estado",
      sexo: "$_id.sexo",
      total: "$total"
    }
  }
])
// Exercício 7 : Utilizando a mesma agregação do exercício anterior, adicione um estágio de projeção para modificar os documentos de saída, de forma que se pareçam com o documento a seguir (não se importe com a ordem dos campos):

use ("erp");
db.vendas.aggregate([
  {
    $match: {
      status: { $in: ["ENTREGUE", "EM SEPARACAO"] }
    }
  },
  {
    $group: {
      _id: "$clienteId",
      valorTotal: { $sum: "$valorTotal" },
    },
  },
  { $sort: { valorTotal: -1 } },
  { $limit: 5 }
]);
// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.
use ("erp");
db.vendas.aggregate([
  {
    $match: {
      status: { $in: ["ENTREGUE", "EM SEPARACAO"] },
      dataVenda: {
        $gte: ISODate('2019-01-01'),
        $lte: ISODate('2019-12-31'),
      }
    }
  },
  {
    $group: {
      _id: {
        id: "$clienteId",
        data: "$dataVenda",
        valorTotal: { $sum: "$valorTotal"},
      }
    }
  },
  { $sort: { valorTotal: -1 }},
  { $limit: 10 }
]);
// Exercício 9 : Descubra quais são os 10 clientes que gastaram o maior valor no ano de 2019 .

use ("erp");
db.vendas.aggregate([
  {
    $group: {
      _id: "$clienteId",
      totalCompras: { $sum: 1 }
    }
  },
  {
    $match: {
      totalCompras: { $gt: 5 }
    }
  },
  {
    $count: "total Clientes"
  }
]);
// Exercício 10 : Descubra quantos clientes compraram mais de 5 vezes. Retorne um documento que contenha somente o campo clientes com o total de clientes.

use ("erp");
db.vendas.aggregate([
  {
    $match: {
      dataVenda: {
        $gte: ISODate('2020-01-01'),
        $lte: ISODate('2020-03-31'),
      },
    }
  },
  {
    $group: {
      _id: "$clienteId",
      valorTotal: { $sum: 1 }
    }
  },
  {
    $match: {
      valorTotal: { $lt: 3}
    }
  },
  {
    $count: "total clientes"
  }
])
// Exercício 11 : Descubra quantos clientes compraram menos de três vezes entre os meses de Janeiro de 2020 e Março de 2020 .

use ("erp");
db.vendas.aggregate([
  {
    $match: {
      dataVenda: {
        $gte: ISODate('2020-01-01'),
        $lte: ISODate('2020-12-31'),
      }
    }
  },
  {
    $lookup: {
      from:"clients",
      localField:"clienteId",
      foreignField:"clienteId",
      as: "clientesDados",
    }
  },
  {
    $unwind: "$clientesDados"
  },
  {
    $group: {
      _id: "$clientesDados.endereco.uf",
      pedidosUF: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      totalVendas: "$pedidosUF",
      uf: "$_id"
    }
  },
  { $sort:{ totalVendas: -1 }},
  { $limit: 3 }
]);
// Exercício 12 : Descubra quais as três uf s que mais compraram no ano de 2020 .

use ("erp");
db.vendas.aggregate([
  {
    $match: {
      dataVenda: {
        $gte: ISODate('2019-01-01'),
        $lte: ISODate('2019-12-31'),
      }
    }
  },
  {
    $lookup: {
      from: "clients",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "dataClients",
    }
  },
  {
    $unwind: "$dataClients",
  },
  {
    $group: {
      _id: "$dataClients.endereco.uf",
      totalVendas: { $sum: 1 },
      mediaVendas: { $avg: "$valorTotal" },
    }
  },
  {
    $project: {
      _id: 0,
      uf: "$_id",
      totalVendas: 1,
      mediaVendas: 1,
    }
  },
  {
    $sort: { uf: 1 }
  }
]);
// Exercício 13 : Encontre qual foi o total de vendas e a média de vendas de cada uf no ano de 2019 . Ordene os resultados pelo nome da uf .


use ("erp");
db.vendas.find()

use ("erp");
db.clients.find()