use ("storage");
db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0, name: 1, totalCost: { $add: ["$purchase_price", "$taxes"] }
    }
  }
]);
// Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos.

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      profite: {
        $subtract: [
          "$sale_price",
          { $add: ["$purchase_price", "$taxes"] }]
      },
    }
  }
]);
// Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      value_floor: { $floor: "$sale_price" },
    }
  }
]);
// Retorne o menor número inteiro relativo ao preço de venda de cada produto;

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      value_ceil: {
        $ceil: { $subtract: [
          "$sale_price",
          "$purchase_price",
        ] }
      },
    }
  }
]);
// Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      absolute_value: {
        $abs: {
          $subtract: [
            "$sale_price",
            { $add: ["$purchase_price", "$taxes"] },
          ]
        }
      }
    }
  }
]);
// Calcule o valor absoluto do lucro total de cada produto.

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      stoqValue: {
        $multiply: [
          "$sale_price",
          "$quantity",
        ]
      }
    }
  }
]);
// Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade;

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      totalProfite: {
        $multiply: [
          {
            $subtract: [
              "$sale_price",
              { $add: [
                "$purchase_price",
                "$taxes",
              ] }
            ]
          },
          "$quantity",
        ]
      }
    }
  }
]);
// Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido.

use ("storage");
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      discount: {
        $divide: [
          "$sale_price",
          2,
        ]
      }
    }
  }
]);
// Calcule qual será o preço de venda de cada produto caso haja uma promoção de 50% de desconto.

use ("storage");
db.products.aggregate([
  {
    $addFields: {
      stoqValue: {
        $multiply: ["$sale_price", "$quantity"]
      } 
    }
  }
]);
// Calcule o valor total do estoque, considerando que cada produto valha o mesmo que seu preço de venda. Lembre-se da quantidade.

use ("storage");
db.products.find()